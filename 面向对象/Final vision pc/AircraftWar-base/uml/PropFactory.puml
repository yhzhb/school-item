@startuml
'https://plantuml.com/class-diagram

interface PropFactory{
+createProp(AbstractAircraft abstractAircraft):GameProp
}
class BlpropFactory{
+createProp(AbstractAircraft abstractAircraft):GameProp
}
class BopropFactory{
+createProp(AbstractAircraft abstractAircraft):GameProp
}
class BupropFactory{
+createProp(AbstractAircraft abstractAircraft):GameProp
}

abstract class AbstractProp{
 + AbstractProp(int locationX, int locationY, int speedX, int speedY)
 + forward()
 + addMember(Exploed exploed)
 + {abstract} effect(HeroAircraft heroAircraft)
}

class BloodProp{
 + BloodProp(int locationX, int locationY, int speedX, int speedY)
 + forward()
 + effect(HeroAircraft heroAircraft)
}

class BombProp{
 - exploedthings: List<Exploed>
 + BombProp(int locationX, int locationY, int speedX, int speedY)
 + forward()
 + addMember(Exploed exploed)
 + effect(HeroAircraft heroAircraft)
}

class BulletProp{
 - cnt :int
 - thread : Thread
 - lathread : Thread
 + BulletProp(int locationX, int locationY, int speedX, int speedY)
 + forward()
 + setCnt(int cnt)
 + setThread(Thread thread)
 + effect(HeroAircraft heroAircraft)
 + getThread():Thread
}

PropFactoryDemo .up.> PropFactory
PropFactoryDemo .down.> AbstractProp

BlpropFactory ..|> PropFactory
BupropFactory ..|>PropFactory
BopropFactory ..|>  PropFactory

AbstractProp  <|-- BloodProp
AbstractProp  <|-- BombProp
AbstractProp <|-- BulletProp

BlpropFactory ..> BloodProp : create
BupropFactory ..> BulletProp : create
BopropFactory ..> BombProp:create
@enduml