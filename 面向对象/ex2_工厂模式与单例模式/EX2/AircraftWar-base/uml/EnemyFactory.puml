@startuml
'https://plantuml.com/class-diagram


interface EnemyFactory{
+createEnemy():FatherEnemy
}
class BossFactory{
+createEnemy():FatherEnemy
}

class EliteFactory{
 +createEnemy():FatherEnemy
}
class MobFactory{
 +createEnemy():FatherEnemy
}

abstract  class FatherEnemy{
-randtype:int
+ FatherEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
+ shoot():List<BaseBullet>
+ {protected} getPropFactory():PropFactory
+ getProp():GameProp
}

class BossEnemy{
- shootNum:int
- power:int
- direction:int
+ BossEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
+ forward()
+ shoot():List<BaseBullet>
+ getProp():GameProp
}

class EliteEnemy{
- shootNum:int
- power:int
- direction:int
+ EliteEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
+ forward()
+ shoot():List<BaseBullet>
+ getProp():GameProp
}
class MobEnemy{
+ MobEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
+ forward()
+ shoot():List<BaseBullet>
+ getProp():GameProp
}

EnemyFactoryDemo .up.> EnemyFactory
EnemyFactoryDemo .down.> FatherEnemy
MobFactory ..|> EnemyFactory
EliteFactory ..|> EnemyFactory
BossFactory ..|>  EnemyFactory

FatherEnemy  <|-- MobEnemy
FatherEnemy  <|-- EliteEnemy
FatherEnemy <|-- BossEnemy

MobFactory ..> MobEnemy : create
EliteFactory ..> EliteEnemy : create
BossFactory ..> EliteEnemy:create
@enduml